{"version":3,"sources":["helperfun.tsx","ghosts.tsx","App.tsx","index.tsx"],"names":["createEvidenceStateFromSource","ghostData","reduce","AllUniqueEvidence","ghostInfo","evidence","forEach","evidenceEach","includes","push","getAllUniqueEvidence","map","selected","ignored","ghosts","name","App","delayedTimer","useState","evidenceState","setEvidenceState","delayedPress","setDelayedPress","handleMouseDown","evidenceStateEach","setTimeout","prevEvidenceState","e","toggleIgnored","handleMouseUp","clearTimeout","toggleSelected","filteredGhosts","filter","ghost","filterSelected","every","filterIgnored","filteredEvidence","console","table","className","disabled","onMouseDown","onMouseUp","onTouchStart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf3d10d2.chunk.js","sourcesContent":["import { Ghost, Evidence } from \"./ghosts\";\r\n\r\nexport interface EvidenceState {\r\n  evidence: Evidence;\r\n  selected: boolean;\r\n  ignored: boolean;\r\n}\r\n\r\nfunction getAllUniqueEvidence(ghostData: Ghost[]): Evidence[] {\r\n  return ghostData.reduce((AllUniqueEvidence: Evidence[], ghostInfo: Ghost) => {\r\n    ghostInfo.evidence.forEach((evidenceEach) =>\r\n      AllUniqueEvidence.includes(evidenceEach)\r\n        ? null\r\n        : AllUniqueEvidence.push(evidenceEach)\r\n    );\r\n    return AllUniqueEvidence;\r\n  }, []);\r\n}\r\n\r\nfunction createEvidenceState(evidenceArray: Evidence[]): EvidenceState[] {\r\n  return evidenceArray.map((evidenceEach) => ({\r\n    evidence: evidenceEach,\r\n    selected: false,\r\n    ignored: false,\r\n  }));\r\n}\r\n\r\nexport function createEvidenceStateFromSource(\r\n  ghostData: Ghost[]\r\n): EvidenceState[] {\r\n  return createEvidenceState(getAllUniqueEvidence(ghostData));\r\n}\r\n\r\nexport function filterSelected(\r\n  evidenceState: EvidenceState[]\r\n): EvidenceState[] {\r\n  return evidenceState.filter((e) => e.selected === true);\r\n}\r\n\r\nexport function filterIgnored(evidenceState: EvidenceState[]): EvidenceState[] {\r\n  return evidenceState.filter((e) => e.ignored === true);\r\n}\r\n","export const evidenceList = [\r\n  \"EMF Level 5\",\r\n  \"Fingerprints\",\r\n  \"Freezing Temperatures\",\r\n  \"Ghost Orb\",\r\n  \"Ghost Writing\",\r\n  \"Spirit Box\",\r\n] as const;\r\n\r\nconst ghostName = [\r\n  \"Banshee\",\r\n  \"Demon\",\r\n  \"Jinn\",\r\n  \"Mare\",\r\n  \"Oni\",\r\n  \"Phantom\",\r\n  \"Poltergeist\",\r\n  \"Revenant\",\r\n  \"Shade\",\r\n  \"Spirit\",\r\n  \"Wraith\",\r\n  \"Yurei\",\r\n  \"Yokai\",\r\n  \"Hantu\",\r\n];\r\n\r\nexport type Evidence = typeof evidenceList[number];\r\ntype GhostName = typeof ghostName[number];\r\n\r\nexport interface Ghost {\r\n  name: GhostName;\r\n  evidence: [Evidence, Evidence, Evidence];\r\n}\r\n\r\nexport const ghosts: Ghost[] = [\r\n  {\r\n    name: \"Spirit\",\r\n    evidence: [\"Fingerprints\", \"Ghost Writing\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Wraith\",\r\n    evidence: [\"Fingerprints\", \"Freezing Temperatures\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Phantom\",\r\n    evidence: [\"EMF Level 5\", \"Freezing Temperatures\", \"Ghost Orb\"],\r\n  },\r\n  {\r\n    name: \"Poltergeist\",\r\n    evidence: [\"Fingerprints\", \"Ghost Orb\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Banshee\",\r\n    evidence: [\"EMF Level 5\", \"Fingerprints\", \"Freezing Temperatures\"],\r\n  },\r\n  {\r\n    name: \"Jinn\",\r\n    evidence: [\"EMF Level 5\", \"Ghost Orb\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Mare\",\r\n    evidence: [\"Freezing Temperatures\", \"Ghost Orb\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Revenant\",\r\n    evidence: [\"EMF Level 5\", \"Fingerprints\", \"Ghost Writing\"],\r\n  },\r\n  {\r\n    name: \"Shade\",\r\n    evidence: [\"EMF Level 5\", \"Ghost Orb\", \"Ghost Writing\"],\r\n  },\r\n  {\r\n    name: \"Demon\",\r\n    evidence: [\"Freezing Temperatures\", \"Ghost Writing\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Yurei\",\r\n    evidence: [\"Freezing Temperatures\", \"Ghost Orb\", \"Ghost Writing\"],\r\n  },\r\n  {\r\n    name: \"Oni\",\r\n    evidence: [\"EMF Level 5\", \"Ghost Writing\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Yokai\",\r\n    evidence: [\"Ghost Orb\", \"Ghost Writing\", \"Spirit Box\"],\r\n  },\r\n  {\r\n    name: \"Hantu\",\r\n    evidence: [\"Fingerprints\", \"Ghost Orb\", \"Ghost Writing\"],\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  createEvidenceStateFromSource,\r\n  EvidenceState,\r\n  filterSelected,\r\n  filterIgnored,\r\n} from \"./helperfun\";\r\nimport { Ghost, ghosts, Evidence } from \"./ghosts\";\r\nimport { useState } from \"react\";\r\n\r\nexport const App: FC = () => {\r\n  const [evidenceState, setEvidenceState] = useState(\r\n    createEvidenceStateFromSource(ghosts)\r\n  );\r\n  const [delayedPress, setDelayedPress] = useState(false);\r\n\r\n  let delayedTimer: ReturnType<typeof setTimeout>;\r\n\r\n  function toggleIgnored(evidenceStateEach: EvidenceState) {\r\n    setEvidenceState((prevEvidenceState) => {\r\n      return prevEvidenceState.map((e) => {\r\n        if (e.evidence === evidenceStateEach.evidence) {\r\n          return {\r\n            ...evidenceStateEach,\r\n            selected: false,\r\n            ignored: true,\r\n          };\r\n        } else return e;\r\n      });\r\n    });\r\n  }\r\n\r\n  function toggleSelected(evidenceStateEach: EvidenceState) {\r\n    setEvidenceState((prevEvidenceState) => {\r\n      return prevEvidenceState.map((e) => {\r\n        if (e.evidence === evidenceStateEach.evidence) {\r\n          return {\r\n            ...evidenceStateEach,\r\n            selected: e.ignored ? false : !e.selected,\r\n            ignored: false,\r\n          };\r\n        } else return e;\r\n      });\r\n    });\r\n  }\r\n\r\n  function handleMouseDown(evidenceStateEach: EvidenceState) {\r\n    delayedTimer = setTimeout(() => {\r\n      setDelayedPress(true);\r\n      toggleIgnored(evidenceStateEach);\r\n    }, 500);\r\n  }\r\n  function handleMouseUp(evidenceStateEach: EvidenceState) {\r\n    clearTimeout(delayedTimer);\r\n    if (!delayedPress) {\r\n      toggleSelected(evidenceStateEach);\r\n    }\r\n    setDelayedPress(false);\r\n  }\r\n\r\n  const filteredGhosts: Ghost[] = ghosts.filter(\r\n    (ghost) =>\r\n      filterSelected(evidenceState).every((e) =>\r\n        ghost.evidence.includes(e.evidence)\r\n      ) &&\r\n      filterIgnored(evidenceState).every(\r\n        (e) => !ghost.evidence.includes(e.evidence)\r\n      )\r\n  );\r\n\r\n  const filteredEvidence: Evidence[] = createEvidenceStateFromSource(\r\n    filteredGhosts\r\n  ).map((e) => e.evidence);\r\n\r\n  const buttonClass = console.table(evidenceState);\r\n\r\n  return (\r\n    <main>\r\n      <ul className=\"ghosts-list\">\r\n        {filteredGhosts.map((ghost) => (\r\n          <li key={ghost.name}>{ghost.name}</li>\r\n        ))}\r\n      </ul>\r\n      <ul className=\"btnEvidence-list\">\r\n        {evidenceState.map((evidenceStateEach) => (\r\n          <li key={evidenceStateEach.evidence}>\r\n            <button\r\n              disabled={\r\n                !(\r\n                  filteredEvidence.includes(evidenceStateEach.evidence) ||\r\n                  evidenceStateEach.ignored\r\n                )\r\n              }\r\n              className={\r\n                \"btnEvidence\" +\r\n                \" \" +\r\n                (evidenceStateEach.ignored\r\n                  ? \"btnEvidence-ignored\"\r\n                  : evidenceStateEach.selected\r\n                  ? \"btnEvidence-selected\"\r\n                  : \"\")\r\n              }\r\n              onMouseDown={() => handleMouseDown(evidenceStateEach)}\r\n              onMouseUp={() => handleMouseUp(evidenceStateEach)}\r\n              onTouchStart={() => handleMouseDown(evidenceStateEach)}\r\n            >\r\n              {evidenceStateEach.evidence}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </main>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\nimport \"./style.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}